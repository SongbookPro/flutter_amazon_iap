// Autogenerated from Pigeon (v4.0.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.songbookpro.amazon_iap;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Pigeon {

  public enum RequestStatus {
    SUCCESSFUL(0),
    FAILED(1),
    NOT_SUPPORTED(2);

    private int index;
    private RequestStatus(final int index) {
      this.index = index;
    }
  }

  public enum PurchaseRequestStatus {
    SUCCESSFUL(0),
    FAILED(1),
    INVALID_SKU(2),
    ALREADY_PURCHASED(3),
    NOT_SUPPORTED(4);

    private int index;
    private PurchaseRequestStatus(final int index) {
      this.index = index;
    }
  }

  public enum ProductType {
    CONSUMABLE(0),
    ENTITLED(1),
    SUBSCRIPTION(2);

    private int index;
    private ProductType(final int index) {
      this.index = index;
    }
  }

  public enum FulfillmentResult {
    FULFILLED(0),
    UNAVAILABLE(1);

    private int index;
    private FulfillmentResult(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class UserData {
    private @NonNull String userId;
    public @NonNull String getUserId() { return userId; }
    public void setUserId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"userId\" is null.");
      }
      this.userId = setterArg;
    }

    private @NonNull String marketplace;
    public @NonNull String getMarketplace() { return marketplace; }
    public void setMarketplace(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"marketplace\" is null.");
      }
      this.marketplace = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private UserData() {}
    public static final class Builder {
      private @Nullable String userId;
      public @NonNull Builder setUserId(@NonNull String setterArg) {
        this.userId = setterArg;
        return this;
      }
      private @Nullable String marketplace;
      public @NonNull Builder setMarketplace(@NonNull String setterArg) {
        this.marketplace = setterArg;
        return this;
      }
      public @NonNull UserData build() {
        UserData pigeonReturn = new UserData();
        pigeonReturn.setUserId(userId);
        pigeonReturn.setMarketplace(marketplace);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("userId", userId);
      toMapResult.put("marketplace", marketplace);
      return toMapResult;
    }
    static @NonNull UserData fromMap(@NonNull Map<String, Object> map) {
      UserData pigeonResult = new UserData();
      Object userId = map.get("userId");
      pigeonResult.setUserId((String)userId);
      Object marketplace = map.get("marketplace");
      pigeonResult.setMarketplace((String)marketplace);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class UserDataResponse {
    private @NonNull RequestStatus requestStatus;
    public @NonNull RequestStatus getRequestStatus() { return requestStatus; }
    public void setRequestStatus(@NonNull RequestStatus setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"requestStatus\" is null.");
      }
      this.requestStatus = setterArg;
    }

    private @NonNull UserData userData;
    public @NonNull UserData getUserData() { return userData; }
    public void setUserData(@NonNull UserData setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"userData\" is null.");
      }
      this.userData = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private UserDataResponse() {}
    public static final class Builder {
      private @Nullable RequestStatus requestStatus;
      public @NonNull Builder setRequestStatus(@NonNull RequestStatus setterArg) {
        this.requestStatus = setterArg;
        return this;
      }
      private @Nullable UserData userData;
      public @NonNull Builder setUserData(@NonNull UserData setterArg) {
        this.userData = setterArg;
        return this;
      }
      public @NonNull UserDataResponse build() {
        UserDataResponse pigeonReturn = new UserDataResponse();
        pigeonReturn.setRequestStatus(requestStatus);
        pigeonReturn.setUserData(userData);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("requestStatus", requestStatus == null ? null : requestStatus.index);
      toMapResult.put("userData", (userData == null) ? null : userData.toMap());
      return toMapResult;
    }
    static @NonNull UserDataResponse fromMap(@NonNull Map<String, Object> map) {
      UserDataResponse pigeonResult = new UserDataResponse();
      Object requestStatus = map.get("requestStatus");
      pigeonResult.setRequestStatus(requestStatus == null ? null : RequestStatus.values()[(int)requestStatus]);
      Object userData = map.get("userData");
      pigeonResult.setUserData((userData == null) ? null : UserData.fromMap((Map)userData));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Receipt {
    private @NonNull String receiptId;
    public @NonNull String getReceiptId() { return receiptId; }
    public void setReceiptId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"receiptId\" is null.");
      }
      this.receiptId = setterArg;
    }

    private @NonNull String sku;
    public @NonNull String getSku() { return sku; }
    public void setSku(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"sku\" is null.");
      }
      this.sku = setterArg;
    }

    private @Nullable String termSku;
    public @Nullable String getTermSku() { return termSku; }
    public void setTermSku(@Nullable String setterArg) {
      this.termSku = setterArg;
    }

    private @NonNull ProductType productType;
    public @NonNull ProductType getProductType() { return productType; }
    public void setProductType(@NonNull ProductType setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"productType\" is null.");
      }
      this.productType = setterArg;
    }

    private @NonNull Long purchaseDate;
    public @NonNull Long getPurchaseDate() { return purchaseDate; }
    public void setPurchaseDate(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"purchaseDate\" is null.");
      }
      this.purchaseDate = setterArg;
    }

    private @Nullable Long cancelDate;
    public @Nullable Long getCancelDate() { return cancelDate; }
    public void setCancelDate(@Nullable Long setterArg) {
      this.cancelDate = setterArg;
    }

    private @Nullable Long deferredDate;
    public @Nullable Long getDeferredDate() { return deferredDate; }
    public void setDeferredDate(@Nullable Long setterArg) {
      this.deferredDate = setterArg;
    }

    private @Nullable String deferredSku;
    public @Nullable String getDeferredSku() { return deferredSku; }
    public void setDeferredSku(@Nullable String setterArg) {
      this.deferredSku = setterArg;
    }

    private @NonNull Boolean isCanceled;
    public @NonNull Boolean getIsCanceled() { return isCanceled; }
    public void setIsCanceled(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"isCanceled\" is null.");
      }
      this.isCanceled = setterArg;
    }

    private @NonNull Boolean isDeferred;
    public @NonNull Boolean getIsDeferred() { return isDeferred; }
    public void setIsDeferred(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"isDeferred\" is null.");
      }
      this.isDeferred = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private Receipt() {}
    public static final class Builder {
      private @Nullable String receiptId;
      public @NonNull Builder setReceiptId(@NonNull String setterArg) {
        this.receiptId = setterArg;
        return this;
      }
      private @Nullable String sku;
      public @NonNull Builder setSku(@NonNull String setterArg) {
        this.sku = setterArg;
        return this;
      }
      private @Nullable String termSku;
      public @NonNull Builder setTermSku(@Nullable String setterArg) {
        this.termSku = setterArg;
        return this;
      }
      private @Nullable ProductType productType;
      public @NonNull Builder setProductType(@NonNull ProductType setterArg) {
        this.productType = setterArg;
        return this;
      }
      private @Nullable Long purchaseDate;
      public @NonNull Builder setPurchaseDate(@NonNull Long setterArg) {
        this.purchaseDate = setterArg;
        return this;
      }
      private @Nullable Long cancelDate;
      public @NonNull Builder setCancelDate(@Nullable Long setterArg) {
        this.cancelDate = setterArg;
        return this;
      }
      private @Nullable Long deferredDate;
      public @NonNull Builder setDeferredDate(@Nullable Long setterArg) {
        this.deferredDate = setterArg;
        return this;
      }
      private @Nullable String deferredSku;
      public @NonNull Builder setDeferredSku(@Nullable String setterArg) {
        this.deferredSku = setterArg;
        return this;
      }
      private @Nullable Boolean isCanceled;
      public @NonNull Builder setIsCanceled(@NonNull Boolean setterArg) {
        this.isCanceled = setterArg;
        return this;
      }
      private @Nullable Boolean isDeferred;
      public @NonNull Builder setIsDeferred(@NonNull Boolean setterArg) {
        this.isDeferred = setterArg;
        return this;
      }
      public @NonNull Receipt build() {
        Receipt pigeonReturn = new Receipt();
        pigeonReturn.setReceiptId(receiptId);
        pigeonReturn.setSku(sku);
        pigeonReturn.setTermSku(termSku);
        pigeonReturn.setProductType(productType);
        pigeonReturn.setPurchaseDate(purchaseDate);
        pigeonReturn.setCancelDate(cancelDate);
        pigeonReturn.setDeferredDate(deferredDate);
        pigeonReturn.setDeferredSku(deferredSku);
        pigeonReturn.setIsCanceled(isCanceled);
        pigeonReturn.setIsDeferred(isDeferred);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("receiptId", receiptId);
      toMapResult.put("sku", sku);
      toMapResult.put("termSku", termSku);
      toMapResult.put("productType", productType == null ? null : productType.index);
      toMapResult.put("purchaseDate", purchaseDate);
      toMapResult.put("cancelDate", cancelDate);
      toMapResult.put("deferredDate", deferredDate);
      toMapResult.put("deferredSku", deferredSku);
      toMapResult.put("isCanceled", isCanceled);
      toMapResult.put("isDeferred", isDeferred);
      return toMapResult;
    }
    static @NonNull Receipt fromMap(@NonNull Map<String, Object> map) {
      Receipt pigeonResult = new Receipt();
      Object receiptId = map.get("receiptId");
      pigeonResult.setReceiptId((String)receiptId);
      Object sku = map.get("sku");
      pigeonResult.setSku((String)sku);
      Object termSku = map.get("termSku");
      pigeonResult.setTermSku((String)termSku);
      Object productType = map.get("productType");
      pigeonResult.setProductType(productType == null ? null : ProductType.values()[(int)productType]);
      Object purchaseDate = map.get("purchaseDate");
      pigeonResult.setPurchaseDate((purchaseDate == null) ? null : ((purchaseDate instanceof Integer) ? (Integer)purchaseDate : (Long)purchaseDate));
      Object cancelDate = map.get("cancelDate");
      pigeonResult.setCancelDate((cancelDate == null) ? null : ((cancelDate instanceof Integer) ? (Integer)cancelDate : (Long)cancelDate));
      Object deferredDate = map.get("deferredDate");
      pigeonResult.setDeferredDate((deferredDate == null) ? null : ((deferredDate instanceof Integer) ? (Integer)deferredDate : (Long)deferredDate));
      Object deferredSku = map.get("deferredSku");
      pigeonResult.setDeferredSku((String)deferredSku);
      Object isCanceled = map.get("isCanceled");
      pigeonResult.setIsCanceled((Boolean)isCanceled);
      Object isDeferred = map.get("isDeferred");
      pigeonResult.setIsDeferred((Boolean)isDeferred);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PurchaseUpdatesResponse {
    private @Nullable UserData userData;
    public @Nullable UserData getUserData() { return userData; }
    public void setUserData(@Nullable UserData setterArg) {
      this.userData = setterArg;
    }

    private @NonNull RequestStatus requestStatus;
    public @NonNull RequestStatus getRequestStatus() { return requestStatus; }
    public void setRequestStatus(@NonNull RequestStatus setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"requestStatus\" is null.");
      }
      this.requestStatus = setterArg;
    }

    private @NonNull List<Receipt> receipts;
    public @NonNull List<Receipt> getReceipts() { return receipts; }
    public void setReceipts(@NonNull List<Receipt> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"receipts\" is null.");
      }
      this.receipts = setterArg;
    }

    private @NonNull Boolean hasMore;
    public @NonNull Boolean getHasMore() { return hasMore; }
    public void setHasMore(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"hasMore\" is null.");
      }
      this.hasMore = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private PurchaseUpdatesResponse() {}
    public static final class Builder {
      private @Nullable UserData userData;
      public @NonNull Builder setUserData(@Nullable UserData setterArg) {
        this.userData = setterArg;
        return this;
      }
      private @Nullable RequestStatus requestStatus;
      public @NonNull Builder setRequestStatus(@NonNull RequestStatus setterArg) {
        this.requestStatus = setterArg;
        return this;
      }
      private @Nullable List<Receipt> receipts;
      public @NonNull Builder setReceipts(@NonNull List<Receipt> setterArg) {
        this.receipts = setterArg;
        return this;
      }
      private @Nullable Boolean hasMore;
      public @NonNull Builder setHasMore(@NonNull Boolean setterArg) {
        this.hasMore = setterArg;
        return this;
      }
      public @NonNull PurchaseUpdatesResponse build() {
        PurchaseUpdatesResponse pigeonReturn = new PurchaseUpdatesResponse();
        pigeonReturn.setUserData(userData);
        pigeonReturn.setRequestStatus(requestStatus);
        pigeonReturn.setReceipts(receipts);
        pigeonReturn.setHasMore(hasMore);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("userData", (userData == null) ? null : userData.toMap());
      toMapResult.put("requestStatus", requestStatus == null ? null : requestStatus.index);
      toMapResult.put("receipts", receipts);
      toMapResult.put("hasMore", hasMore);
      return toMapResult;
    }
    static @NonNull PurchaseUpdatesResponse fromMap(@NonNull Map<String, Object> map) {
      PurchaseUpdatesResponse pigeonResult = new PurchaseUpdatesResponse();
      Object userData = map.get("userData");
      pigeonResult.setUserData((userData == null) ? null : UserData.fromMap((Map)userData));
      Object requestStatus = map.get("requestStatus");
      pigeonResult.setRequestStatus(requestStatus == null ? null : RequestStatus.values()[(int)requestStatus]);
      Object receipts = map.get("receipts");
      pigeonResult.setReceipts((List<Receipt>)receipts);
      Object hasMore = map.get("hasMore");
      pigeonResult.setHasMore((Boolean)hasMore);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Product {
    private @NonNull String description;
    public @NonNull String getDescription() { return description; }
    public void setDescription(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"description\" is null.");
      }
      this.description = setterArg;
    }

    private @Nullable String freeTrialPeriod;
    public @Nullable String getFreeTrialPeriod() { return freeTrialPeriod; }
    public void setFreeTrialPeriod(@Nullable String setterArg) {
      this.freeTrialPeriod = setterArg;
    }

    private @NonNull String price;
    public @NonNull String getPrice() { return price; }
    public void setPrice(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"price\" is null.");
      }
      this.price = setterArg;
    }

    private @NonNull ProductType productType;
    public @NonNull ProductType getProductType() { return productType; }
    public void setProductType(@NonNull ProductType setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"productType\" is null.");
      }
      this.productType = setterArg;
    }

    private @NonNull String sku;
    public @NonNull String getSku() { return sku; }
    public void setSku(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"sku\" is null.");
      }
      this.sku = setterArg;
    }

    private @NonNull String smallIconUrl;
    public @NonNull String getSmallIconUrl() { return smallIconUrl; }
    public void setSmallIconUrl(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"smallIconUrl\" is null.");
      }
      this.smallIconUrl = setterArg;
    }

    private @Nullable String subscriptionPeriod;
    public @Nullable String getSubscriptionPeriod() { return subscriptionPeriod; }
    public void setSubscriptionPeriod(@Nullable String setterArg) {
      this.subscriptionPeriod = setterArg;
    }

    private @NonNull String title;
    public @NonNull String getTitle() { return title; }
    public void setTitle(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"title\" is null.");
      }
      this.title = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private Product() {}
    public static final class Builder {
      private @Nullable String description;
      public @NonNull Builder setDescription(@NonNull String setterArg) {
        this.description = setterArg;
        return this;
      }
      private @Nullable String freeTrialPeriod;
      public @NonNull Builder setFreeTrialPeriod(@Nullable String setterArg) {
        this.freeTrialPeriod = setterArg;
        return this;
      }
      private @Nullable String price;
      public @NonNull Builder setPrice(@NonNull String setterArg) {
        this.price = setterArg;
        return this;
      }
      private @Nullable ProductType productType;
      public @NonNull Builder setProductType(@NonNull ProductType setterArg) {
        this.productType = setterArg;
        return this;
      }
      private @Nullable String sku;
      public @NonNull Builder setSku(@NonNull String setterArg) {
        this.sku = setterArg;
        return this;
      }
      private @Nullable String smallIconUrl;
      public @NonNull Builder setSmallIconUrl(@NonNull String setterArg) {
        this.smallIconUrl = setterArg;
        return this;
      }
      private @Nullable String subscriptionPeriod;
      public @NonNull Builder setSubscriptionPeriod(@Nullable String setterArg) {
        this.subscriptionPeriod = setterArg;
        return this;
      }
      private @Nullable String title;
      public @NonNull Builder setTitle(@NonNull String setterArg) {
        this.title = setterArg;
        return this;
      }
      public @NonNull Product build() {
        Product pigeonReturn = new Product();
        pigeonReturn.setDescription(description);
        pigeonReturn.setFreeTrialPeriod(freeTrialPeriod);
        pigeonReturn.setPrice(price);
        pigeonReturn.setProductType(productType);
        pigeonReturn.setSku(sku);
        pigeonReturn.setSmallIconUrl(smallIconUrl);
        pigeonReturn.setSubscriptionPeriod(subscriptionPeriod);
        pigeonReturn.setTitle(title);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("description", description);
      toMapResult.put("freeTrialPeriod", freeTrialPeriod);
      toMapResult.put("price", price);
      toMapResult.put("productType", productType == null ? null : productType.index);
      toMapResult.put("sku", sku);
      toMapResult.put("smallIconUrl", smallIconUrl);
      toMapResult.put("subscriptionPeriod", subscriptionPeriod);
      toMapResult.put("title", title);
      return toMapResult;
    }
    static @NonNull Product fromMap(@NonNull Map<String, Object> map) {
      Product pigeonResult = new Product();
      Object description = map.get("description");
      pigeonResult.setDescription((String)description);
      Object freeTrialPeriod = map.get("freeTrialPeriod");
      pigeonResult.setFreeTrialPeriod((String)freeTrialPeriod);
      Object price = map.get("price");
      pigeonResult.setPrice((String)price);
      Object productType = map.get("productType");
      pigeonResult.setProductType(productType == null ? null : ProductType.values()[(int)productType]);
      Object sku = map.get("sku");
      pigeonResult.setSku((String)sku);
      Object smallIconUrl = map.get("smallIconUrl");
      pigeonResult.setSmallIconUrl((String)smallIconUrl);
      Object subscriptionPeriod = map.get("subscriptionPeriod");
      pigeonResult.setSubscriptionPeriod((String)subscriptionPeriod);
      Object title = map.get("title");
      pigeonResult.setTitle((String)title);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ProductDataResponse {
    private @NonNull List<String> unavailableSkus;
    public @NonNull List<String> getUnavailableSkus() { return unavailableSkus; }
    public void setUnavailableSkus(@NonNull List<String> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"unavailableSkus\" is null.");
      }
      this.unavailableSkus = setterArg;
    }

    private @NonNull RequestStatus requestStatus;
    public @NonNull RequestStatus getRequestStatus() { return requestStatus; }
    public void setRequestStatus(@NonNull RequestStatus setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"requestStatus\" is null.");
      }
      this.requestStatus = setterArg;
    }

    private @NonNull Map<String, Product> productData;
    public @NonNull Map<String, Product> getProductData() { return productData; }
    public void setProductData(@NonNull Map<String, Product> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"productData\" is null.");
      }
      this.productData = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private ProductDataResponse() {}
    public static final class Builder {
      private @Nullable List<String> unavailableSkus;
      public @NonNull Builder setUnavailableSkus(@NonNull List<String> setterArg) {
        this.unavailableSkus = setterArg;
        return this;
      }
      private @Nullable RequestStatus requestStatus;
      public @NonNull Builder setRequestStatus(@NonNull RequestStatus setterArg) {
        this.requestStatus = setterArg;
        return this;
      }
      private @Nullable Map<String, Product> productData;
      public @NonNull Builder setProductData(@NonNull Map<String, Product> setterArg) {
        this.productData = setterArg;
        return this;
      }
      public @NonNull ProductDataResponse build() {
        ProductDataResponse pigeonReturn = new ProductDataResponse();
        pigeonReturn.setUnavailableSkus(unavailableSkus);
        pigeonReturn.setRequestStatus(requestStatus);
        pigeonReturn.setProductData(productData);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("unavailableSkus", unavailableSkus);
      toMapResult.put("requestStatus", requestStatus == null ? null : requestStatus.index);
      toMapResult.put("productData", productData);
      return toMapResult;
    }
    static @NonNull ProductDataResponse fromMap(@NonNull Map<String, Object> map) {
      ProductDataResponse pigeonResult = new ProductDataResponse();
      Object unavailableSkus = map.get("unavailableSkus");
      pigeonResult.setUnavailableSkus((List<String>)unavailableSkus);
      Object requestStatus = map.get("requestStatus");
      pigeonResult.setRequestStatus(requestStatus == null ? null : RequestStatus.values()[(int)requestStatus]);
      Object productData = map.get("productData");
      pigeonResult.setProductData((Map<String, Product>)productData);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PurchaseResponse {
    private @Nullable UserData userData;
    public @Nullable UserData getUserData() { return userData; }
    public void setUserData(@Nullable UserData setterArg) {
      this.userData = setterArg;
    }

    private @Nullable Receipt receipt;
    public @Nullable Receipt getReceipt() { return receipt; }
    public void setReceipt(@Nullable Receipt setterArg) {
      this.receipt = setterArg;
    }

    private @NonNull PurchaseRequestStatus requestStatus;
    public @NonNull PurchaseRequestStatus getRequestStatus() { return requestStatus; }
    public void setRequestStatus(@NonNull PurchaseRequestStatus setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"requestStatus\" is null.");
      }
      this.requestStatus = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private PurchaseResponse() {}
    public static final class Builder {
      private @Nullable UserData userData;
      public @NonNull Builder setUserData(@Nullable UserData setterArg) {
        this.userData = setterArg;
        return this;
      }
      private @Nullable Receipt receipt;
      public @NonNull Builder setReceipt(@Nullable Receipt setterArg) {
        this.receipt = setterArg;
        return this;
      }
      private @Nullable PurchaseRequestStatus requestStatus;
      public @NonNull Builder setRequestStatus(@NonNull PurchaseRequestStatus setterArg) {
        this.requestStatus = setterArg;
        return this;
      }
      public @NonNull PurchaseResponse build() {
        PurchaseResponse pigeonReturn = new PurchaseResponse();
        pigeonReturn.setUserData(userData);
        pigeonReturn.setReceipt(receipt);
        pigeonReturn.setRequestStatus(requestStatus);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("userData", (userData == null) ? null : userData.toMap());
      toMapResult.put("receipt", (receipt == null) ? null : receipt.toMap());
      toMapResult.put("requestStatus", requestStatus == null ? null : requestStatus.index);
      return toMapResult;
    }
    static @NonNull PurchaseResponse fromMap(@NonNull Map<String, Object> map) {
      PurchaseResponse pigeonResult = new PurchaseResponse();
      Object userData = map.get("userData");
      pigeonResult.setUserData((userData == null) ? null : UserData.fromMap((Map)userData));
      Object receipt = map.get("receipt");
      pigeonResult.setReceipt((receipt == null) ? null : Receipt.fromMap((Map)receipt));
      Object requestStatus = map.get("requestStatus");
      pigeonResult.setRequestStatus(requestStatus == null ? null : PurchaseRequestStatus.values()[(int)requestStatus]);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class InstallDetails {
    private @NonNull Boolean isAmazonStoreInstalled;
    public @NonNull Boolean getIsAmazonStoreInstalled() { return isAmazonStoreInstalled; }
    public void setIsAmazonStoreInstalled(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"isAmazonStoreInstalled\" is null.");
      }
      this.isAmazonStoreInstalled = setterArg;
    }

    private @NonNull Boolean installedFromAmazonStore;
    public @NonNull Boolean getInstalledFromAmazonStore() { return installedFromAmazonStore; }
    public void setInstalledFromAmazonStore(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"installedFromAmazonStore\" is null.");
      }
      this.installedFromAmazonStore = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private InstallDetails() {}
    public static final class Builder {
      private @Nullable Boolean isAmazonStoreInstalled;
      public @NonNull Builder setIsAmazonStoreInstalled(@NonNull Boolean setterArg) {
        this.isAmazonStoreInstalled = setterArg;
        return this;
      }
      private @Nullable Boolean installedFromAmazonStore;
      public @NonNull Builder setInstalledFromAmazonStore(@NonNull Boolean setterArg) {
        this.installedFromAmazonStore = setterArg;
        return this;
      }
      public @NonNull InstallDetails build() {
        InstallDetails pigeonReturn = new InstallDetails();
        pigeonReturn.setIsAmazonStoreInstalled(isAmazonStoreInstalled);
        pigeonReturn.setInstalledFromAmazonStore(installedFromAmazonStore);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("isAmazonStoreInstalled", isAmazonStoreInstalled);
      toMapResult.put("installedFromAmazonStore", installedFromAmazonStore);
      return toMapResult;
    }
    static @NonNull InstallDetails fromMap(@NonNull Map<String, Object> map) {
      InstallDetails pigeonResult = new InstallDetails();
      Object isAmazonStoreInstalled = map.get("isAmazonStoreInstalled");
      pigeonResult.setIsAmazonStoreInstalled((Boolean)isAmazonStoreInstalled);
      Object installedFromAmazonStore = map.get("installedFromAmazonStore");
      pigeonResult.setInstalledFromAmazonStore((Boolean)installedFromAmazonStore);
      return pigeonResult;
    }
  }
  private static class AmazonIapApiCodec extends StandardMessageCodec {
    public static final AmazonIapApiCodec INSTANCE = new AmazonIapApiCodec();
    private AmazonIapApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return InstallDetails.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof InstallDetails) {
        stream.write(128);
        writeValue(stream, ((InstallDetails) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface AmazonIapApi {
    void setup();
    void getUserData();
    void getPurchaseUpdates(@NonNull Boolean reset);
    void getProductData(@NonNull List<String> skus);
    void purchase(@NonNull String sku);
    void notifyFulfillment(@NonNull String receiptId, @NonNull FulfillmentResult fulfillmentResult);
    @NonNull InstallDetails getInstallationDetails();

    /** The codec used by AmazonIapApi. */
    static MessageCodec<Object> getCodec() {
      return AmazonIapApiCodec.INSTANCE;
    }

    /** Sets up an instance of `AmazonIapApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, AmazonIapApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AmazonIapApi.setup", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.setup();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AmazonIapApi.getUserData", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.getUserData();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AmazonIapApi.getPurchaseUpdates", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Boolean resetArg = (Boolean)args.get(0);
              if (resetArg == null) {
                throw new NullPointerException("resetArg unexpectedly null.");
              }
              api.getPurchaseUpdates(resetArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AmazonIapApi.getProductData", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              List<String> skusArg = (List<String>)args.get(0);
              if (skusArg == null) {
                throw new NullPointerException("skusArg unexpectedly null.");
              }
              api.getProductData(skusArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AmazonIapApi.purchase", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String skuArg = (String)args.get(0);
              if (skuArg == null) {
                throw new NullPointerException("skuArg unexpectedly null.");
              }
              api.purchase(skuArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AmazonIapApi.notifyFulfillment", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String receiptIdArg = (String)args.get(0);
              if (receiptIdArg == null) {
                throw new NullPointerException("receiptIdArg unexpectedly null.");
              }
              FulfillmentResult fulfillmentResultArg = args.get(1) == null ? null : FulfillmentResult.values()[(int)args.get(1)];
              if (fulfillmentResultArg == null) {
                throw new NullPointerException("fulfillmentResultArg unexpectedly null.");
              }
              api.notifyFulfillment(receiptIdArg, fulfillmentResultArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AmazonIapApi.getInstallationDetails", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              InstallDetails output = api.getInstallationDetails();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class AmazonIapCallbackApiCodec extends StandardMessageCodec {
    public static final AmazonIapCallbackApiCodec INSTANCE = new AmazonIapCallbackApiCodec();
    private AmazonIapCallbackApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return Product.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return ProductDataResponse.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return PurchaseResponse.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)131:         
          return PurchaseUpdatesResponse.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)132:         
          return Receipt.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)133:         
          return UserData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)134:         
          return UserData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)135:         
          return UserDataResponse.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof Product) {
        stream.write(128);
        writeValue(stream, ((Product) value).toMap());
      } else 
      if (value instanceof ProductDataResponse) {
        stream.write(129);
        writeValue(stream, ((ProductDataResponse) value).toMap());
      } else 
      if (value instanceof PurchaseResponse) {
        stream.write(130);
        writeValue(stream, ((PurchaseResponse) value).toMap());
      } else 
      if (value instanceof PurchaseUpdatesResponse) {
        stream.write(131);
        writeValue(stream, ((PurchaseUpdatesResponse) value).toMap());
      } else 
      if (value instanceof Receipt) {
        stream.write(132);
        writeValue(stream, ((Receipt) value).toMap());
      } else 
      if (value instanceof UserData) {
        stream.write(133);
        writeValue(stream, ((UserData) value).toMap());
      } else 
      if (value instanceof UserData) {
        stream.write(134);
        writeValue(stream, ((UserData) value).toMap());
      } else 
      if (value instanceof UserDataResponse) {
        stream.write(135);
        writeValue(stream, ((UserDataResponse) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java.*/
  public static class AmazonIapCallbackApi {
    private final BinaryMessenger binaryMessenger;
    public AmazonIapCallbackApi(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    static MessageCodec<Object> getCodec() {
      return AmazonIapCallbackApiCodec.INSTANCE;
    }

    public void onUserDataResponse(@NonNull UserDataResponse dataArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AmazonIapCallbackApi.onUserDataResponse", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(dataArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void onPurchaseUpdatesResponse(@NonNull PurchaseUpdatesResponse dataArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AmazonIapCallbackApi.onPurchaseUpdatesResponse", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(dataArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void onProductDataResponse(@NonNull ProductDataResponse dataArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AmazonIapCallbackApi.onProductDataResponse", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(dataArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void onPurchaseResponse(@NonNull PurchaseResponse dataArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AmazonIapCallbackApi.onPurchaseResponse", getCodec());
      channel.send(new ArrayList<Object>(Arrays.asList(dataArg)), channelReply -> {
        callback.reply(null);
      });
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
