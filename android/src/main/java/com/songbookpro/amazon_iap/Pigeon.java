// Autogenerated from Pigeon (v12.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.songbookpro.amazon_iap;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class Pigeon {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  public enum RequestStatus {
    SUCCESSFUL(0),
    FAILED(1),
    NOT_SUPPORTED(2);

    final int index;

    private RequestStatus(final int index) {
      this.index = index;
    }
  }

  public enum PurchaseRequestStatus {
    SUCCESSFUL(0),
    FAILED(1),
    INVALID_SKU(2),
    ALREADY_PURCHASED(3),
    NOT_SUPPORTED(4);

    final int index;

    private PurchaseRequestStatus(final int index) {
      this.index = index;
    }
  }

  public enum ProductType {
    CONSUMABLE(0),
    ENTITLED(1),
    SUBSCRIPTION(2);

    final int index;

    private ProductType(final int index) {
      this.index = index;
    }
  }

  public enum FulfillmentResult {
    FULFILLED(0),
    UNAVAILABLE(1);

    final int index;

    private FulfillmentResult(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class UserData {
    private @NonNull String userId;

    public @NonNull String getUserId() {
      return userId;
    }

    public void setUserId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"userId\" is null.");
      }
      this.userId = setterArg;
    }

    private @NonNull String marketplace;

    public @NonNull String getMarketplace() {
      return marketplace;
    }

    public void setMarketplace(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"marketplace\" is null.");
      }
      this.marketplace = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    UserData() {}

    public static final class Builder {

      private @Nullable String userId;

      public @NonNull Builder setUserId(@NonNull String setterArg) {
        this.userId = setterArg;
        return this;
      }

      private @Nullable String marketplace;

      public @NonNull Builder setMarketplace(@NonNull String setterArg) {
        this.marketplace = setterArg;
        return this;
      }

      public @NonNull UserData build() {
        UserData pigeonReturn = new UserData();
        pigeonReturn.setUserId(userId);
        pigeonReturn.setMarketplace(marketplace);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(userId);
      toListResult.add(marketplace);
      return toListResult;
    }

    static @NonNull UserData fromList(@NonNull ArrayList<Object> list) {
      UserData pigeonResult = new UserData();
      Object userId = list.get(0);
      pigeonResult.setUserId((String) userId);
      Object marketplace = list.get(1);
      pigeonResult.setMarketplace((String) marketplace);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class UserDataResponse {
    private @NonNull RequestStatus requestStatus;

    public @NonNull RequestStatus getRequestStatus() {
      return requestStatus;
    }

    public void setRequestStatus(@NonNull RequestStatus setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"requestStatus\" is null.");
      }
      this.requestStatus = setterArg;
    }

    private @NonNull UserData userData;

    public @NonNull UserData getUserData() {
      return userData;
    }

    public void setUserData(@NonNull UserData setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"userData\" is null.");
      }
      this.userData = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    UserDataResponse() {}

    public static final class Builder {

      private @Nullable RequestStatus requestStatus;

      public @NonNull Builder setRequestStatus(@NonNull RequestStatus setterArg) {
        this.requestStatus = setterArg;
        return this;
      }

      private @Nullable UserData userData;

      public @NonNull Builder setUserData(@NonNull UserData setterArg) {
        this.userData = setterArg;
        return this;
      }

      public @NonNull UserDataResponse build() {
        UserDataResponse pigeonReturn = new UserDataResponse();
        pigeonReturn.setRequestStatus(requestStatus);
        pigeonReturn.setUserData(userData);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(requestStatus == null ? null : requestStatus.index);
      toListResult.add((userData == null) ? null : userData.toList());
      return toListResult;
    }

    static @NonNull UserDataResponse fromList(@NonNull ArrayList<Object> list) {
      UserDataResponse pigeonResult = new UserDataResponse();
      Object requestStatus = list.get(0);
      pigeonResult.setRequestStatus(RequestStatus.values()[(int) requestStatus]);
      Object userData = list.get(1);
      pigeonResult.setUserData((userData == null) ? null : UserData.fromList((ArrayList<Object>) userData));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class Receipt {
    private @NonNull String receiptId;

    public @NonNull String getReceiptId() {
      return receiptId;
    }

    public void setReceiptId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"receiptId\" is null.");
      }
      this.receiptId = setterArg;
    }

    private @NonNull String sku;

    public @NonNull String getSku() {
      return sku;
    }

    public void setSku(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"sku\" is null.");
      }
      this.sku = setterArg;
    }

    private @Nullable String termSku;

    public @Nullable String getTermSku() {
      return termSku;
    }

    public void setTermSku(@Nullable String setterArg) {
      this.termSku = setterArg;
    }

    private @NonNull ProductType productType;

    public @NonNull ProductType getProductType() {
      return productType;
    }

    public void setProductType(@NonNull ProductType setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"productType\" is null.");
      }
      this.productType = setterArg;
    }

    private @NonNull Long purchaseDate;

    public @NonNull Long getPurchaseDate() {
      return purchaseDate;
    }

    public void setPurchaseDate(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"purchaseDate\" is null.");
      }
      this.purchaseDate = setterArg;
    }

    private @Nullable Long cancelDate;

    public @Nullable Long getCancelDate() {
      return cancelDate;
    }

    public void setCancelDate(@Nullable Long setterArg) {
      this.cancelDate = setterArg;
    }

    private @Nullable Long deferredDate;

    public @Nullable Long getDeferredDate() {
      return deferredDate;
    }

    public void setDeferredDate(@Nullable Long setterArg) {
      this.deferredDate = setterArg;
    }

    private @Nullable String deferredSku;

    public @Nullable String getDeferredSku() {
      return deferredSku;
    }

    public void setDeferredSku(@Nullable String setterArg) {
      this.deferredSku = setterArg;
    }

    private @NonNull Boolean isCanceled;

    public @NonNull Boolean getIsCanceled() {
      return isCanceled;
    }

    public void setIsCanceled(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"isCanceled\" is null.");
      }
      this.isCanceled = setterArg;
    }

    private @NonNull Boolean isDeferred;

    public @NonNull Boolean getIsDeferred() {
      return isDeferred;
    }

    public void setIsDeferred(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"isDeferred\" is null.");
      }
      this.isDeferred = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    Receipt() {}

    public static final class Builder {

      private @Nullable String receiptId;

      public @NonNull Builder setReceiptId(@NonNull String setterArg) {
        this.receiptId = setterArg;
        return this;
      }

      private @Nullable String sku;

      public @NonNull Builder setSku(@NonNull String setterArg) {
        this.sku = setterArg;
        return this;
      }

      private @Nullable String termSku;

      public @NonNull Builder setTermSku(@Nullable String setterArg) {
        this.termSku = setterArg;
        return this;
      }

      private @Nullable ProductType productType;

      public @NonNull Builder setProductType(@NonNull ProductType setterArg) {
        this.productType = setterArg;
        return this;
      }

      private @Nullable Long purchaseDate;

      public @NonNull Builder setPurchaseDate(@NonNull Long setterArg) {
        this.purchaseDate = setterArg;
        return this;
      }

      private @Nullable Long cancelDate;

      public @NonNull Builder setCancelDate(@Nullable Long setterArg) {
        this.cancelDate = setterArg;
        return this;
      }

      private @Nullable Long deferredDate;

      public @NonNull Builder setDeferredDate(@Nullable Long setterArg) {
        this.deferredDate = setterArg;
        return this;
      }

      private @Nullable String deferredSku;

      public @NonNull Builder setDeferredSku(@Nullable String setterArg) {
        this.deferredSku = setterArg;
        return this;
      }

      private @Nullable Boolean isCanceled;

      public @NonNull Builder setIsCanceled(@NonNull Boolean setterArg) {
        this.isCanceled = setterArg;
        return this;
      }

      private @Nullable Boolean isDeferred;

      public @NonNull Builder setIsDeferred(@NonNull Boolean setterArg) {
        this.isDeferred = setterArg;
        return this;
      }

      public @NonNull Receipt build() {
        Receipt pigeonReturn = new Receipt();
        pigeonReturn.setReceiptId(receiptId);
        pigeonReturn.setSku(sku);
        pigeonReturn.setTermSku(termSku);
        pigeonReturn.setProductType(productType);
        pigeonReturn.setPurchaseDate(purchaseDate);
        pigeonReturn.setCancelDate(cancelDate);
        pigeonReturn.setDeferredDate(deferredDate);
        pigeonReturn.setDeferredSku(deferredSku);
        pigeonReturn.setIsCanceled(isCanceled);
        pigeonReturn.setIsDeferred(isDeferred);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(10);
      toListResult.add(receiptId);
      toListResult.add(sku);
      toListResult.add(termSku);
      toListResult.add(productType == null ? null : productType.index);
      toListResult.add(purchaseDate);
      toListResult.add(cancelDate);
      toListResult.add(deferredDate);
      toListResult.add(deferredSku);
      toListResult.add(isCanceled);
      toListResult.add(isDeferred);
      return toListResult;
    }

    static @NonNull Receipt fromList(@NonNull ArrayList<Object> list) {
      Receipt pigeonResult = new Receipt();
      Object receiptId = list.get(0);
      pigeonResult.setReceiptId((String) receiptId);
      Object sku = list.get(1);
      pigeonResult.setSku((String) sku);
      Object termSku = list.get(2);
      pigeonResult.setTermSku((String) termSku);
      Object productType = list.get(3);
      pigeonResult.setProductType(ProductType.values()[(int) productType]);
      Object purchaseDate = list.get(4);
      pigeonResult.setPurchaseDate((purchaseDate == null) ? null : ((purchaseDate instanceof Integer) ? (Integer) purchaseDate : (Long) purchaseDate));
      Object cancelDate = list.get(5);
      pigeonResult.setCancelDate((cancelDate == null) ? null : ((cancelDate instanceof Integer) ? (Integer) cancelDate : (Long) cancelDate));
      Object deferredDate = list.get(6);
      pigeonResult.setDeferredDate((deferredDate == null) ? null : ((deferredDate instanceof Integer) ? (Integer) deferredDate : (Long) deferredDate));
      Object deferredSku = list.get(7);
      pigeonResult.setDeferredSku((String) deferredSku);
      Object isCanceled = list.get(8);
      pigeonResult.setIsCanceled((Boolean) isCanceled);
      Object isDeferred = list.get(9);
      pigeonResult.setIsDeferred((Boolean) isDeferred);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PurchaseUpdatesResponse {
    private @Nullable UserData userData;

    public @Nullable UserData getUserData() {
      return userData;
    }

    public void setUserData(@Nullable UserData setterArg) {
      this.userData = setterArg;
    }

    private @NonNull RequestStatus requestStatus;

    public @NonNull RequestStatus getRequestStatus() {
      return requestStatus;
    }

    public void setRequestStatus(@NonNull RequestStatus setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"requestStatus\" is null.");
      }
      this.requestStatus = setterArg;
    }

    private @NonNull List<Receipt> receipts;

    public @NonNull List<Receipt> getReceipts() {
      return receipts;
    }

    public void setReceipts(@NonNull List<Receipt> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"receipts\" is null.");
      }
      this.receipts = setterArg;
    }

    private @NonNull Boolean hasMore;

    public @NonNull Boolean getHasMore() {
      return hasMore;
    }

    public void setHasMore(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"hasMore\" is null.");
      }
      this.hasMore = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PurchaseUpdatesResponse() {}

    public static final class Builder {

      private @Nullable UserData userData;

      public @NonNull Builder setUserData(@Nullable UserData setterArg) {
        this.userData = setterArg;
        return this;
      }

      private @Nullable RequestStatus requestStatus;

      public @NonNull Builder setRequestStatus(@NonNull RequestStatus setterArg) {
        this.requestStatus = setterArg;
        return this;
      }

      private @Nullable List<Receipt> receipts;

      public @NonNull Builder setReceipts(@NonNull List<Receipt> setterArg) {
        this.receipts = setterArg;
        return this;
      }

      private @Nullable Boolean hasMore;

      public @NonNull Builder setHasMore(@NonNull Boolean setterArg) {
        this.hasMore = setterArg;
        return this;
      }

      public @NonNull PurchaseUpdatesResponse build() {
        PurchaseUpdatesResponse pigeonReturn = new PurchaseUpdatesResponse();
        pigeonReturn.setUserData(userData);
        pigeonReturn.setRequestStatus(requestStatus);
        pigeonReturn.setReceipts(receipts);
        pigeonReturn.setHasMore(hasMore);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add((userData == null) ? null : userData.toList());
      toListResult.add(requestStatus == null ? null : requestStatus.index);
      toListResult.add(receipts);
      toListResult.add(hasMore);
      return toListResult;
    }

    static @NonNull PurchaseUpdatesResponse fromList(@NonNull ArrayList<Object> list) {
      PurchaseUpdatesResponse pigeonResult = new PurchaseUpdatesResponse();
      Object userData = list.get(0);
      pigeonResult.setUserData((userData == null) ? null : UserData.fromList((ArrayList<Object>) userData));
      Object requestStatus = list.get(1);
      pigeonResult.setRequestStatus(RequestStatus.values()[(int) requestStatus]);
      Object receipts = list.get(2);
      pigeonResult.setReceipts((List<Receipt>) receipts);
      Object hasMore = list.get(3);
      pigeonResult.setHasMore((Boolean) hasMore);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class Product {
    private @NonNull String description;

    public @NonNull String getDescription() {
      return description;
    }

    public void setDescription(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"description\" is null.");
      }
      this.description = setterArg;
    }

    private @Nullable String freeTrialPeriod;

    public @Nullable String getFreeTrialPeriod() {
      return freeTrialPeriod;
    }

    public void setFreeTrialPeriod(@Nullable String setterArg) {
      this.freeTrialPeriod = setterArg;
    }

    private @NonNull String price;

    public @NonNull String getPrice() {
      return price;
    }

    public void setPrice(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"price\" is null.");
      }
      this.price = setterArg;
    }

    private @NonNull ProductType productType;

    public @NonNull ProductType getProductType() {
      return productType;
    }

    public void setProductType(@NonNull ProductType setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"productType\" is null.");
      }
      this.productType = setterArg;
    }

    private @NonNull String sku;

    public @NonNull String getSku() {
      return sku;
    }

    public void setSku(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"sku\" is null.");
      }
      this.sku = setterArg;
    }

    private @NonNull String smallIconUrl;

    public @NonNull String getSmallIconUrl() {
      return smallIconUrl;
    }

    public void setSmallIconUrl(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"smallIconUrl\" is null.");
      }
      this.smallIconUrl = setterArg;
    }

    private @Nullable String subscriptionPeriod;

    public @Nullable String getSubscriptionPeriod() {
      return subscriptionPeriod;
    }

    public void setSubscriptionPeriod(@Nullable String setterArg) {
      this.subscriptionPeriod = setterArg;
    }

    private @NonNull String title;

    public @NonNull String getTitle() {
      return title;
    }

    public void setTitle(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"title\" is null.");
      }
      this.title = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    Product() {}

    public static final class Builder {

      private @Nullable String description;

      public @NonNull Builder setDescription(@NonNull String setterArg) {
        this.description = setterArg;
        return this;
      }

      private @Nullable String freeTrialPeriod;

      public @NonNull Builder setFreeTrialPeriod(@Nullable String setterArg) {
        this.freeTrialPeriod = setterArg;
        return this;
      }

      private @Nullable String price;

      public @NonNull Builder setPrice(@NonNull String setterArg) {
        this.price = setterArg;
        return this;
      }

      private @Nullable ProductType productType;

      public @NonNull Builder setProductType(@NonNull ProductType setterArg) {
        this.productType = setterArg;
        return this;
      }

      private @Nullable String sku;

      public @NonNull Builder setSku(@NonNull String setterArg) {
        this.sku = setterArg;
        return this;
      }

      private @Nullable String smallIconUrl;

      public @NonNull Builder setSmallIconUrl(@NonNull String setterArg) {
        this.smallIconUrl = setterArg;
        return this;
      }

      private @Nullable String subscriptionPeriod;

      public @NonNull Builder setSubscriptionPeriod(@Nullable String setterArg) {
        this.subscriptionPeriod = setterArg;
        return this;
      }

      private @Nullable String title;

      public @NonNull Builder setTitle(@NonNull String setterArg) {
        this.title = setterArg;
        return this;
      }

      public @NonNull Product build() {
        Product pigeonReturn = new Product();
        pigeonReturn.setDescription(description);
        pigeonReturn.setFreeTrialPeriod(freeTrialPeriod);
        pigeonReturn.setPrice(price);
        pigeonReturn.setProductType(productType);
        pigeonReturn.setSku(sku);
        pigeonReturn.setSmallIconUrl(smallIconUrl);
        pigeonReturn.setSubscriptionPeriod(subscriptionPeriod);
        pigeonReturn.setTitle(title);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(8);
      toListResult.add(description);
      toListResult.add(freeTrialPeriod);
      toListResult.add(price);
      toListResult.add(productType == null ? null : productType.index);
      toListResult.add(sku);
      toListResult.add(smallIconUrl);
      toListResult.add(subscriptionPeriod);
      toListResult.add(title);
      return toListResult;
    }

    static @NonNull Product fromList(@NonNull ArrayList<Object> list) {
      Product pigeonResult = new Product();
      Object description = list.get(0);
      pigeonResult.setDescription((String) description);
      Object freeTrialPeriod = list.get(1);
      pigeonResult.setFreeTrialPeriod((String) freeTrialPeriod);
      Object price = list.get(2);
      pigeonResult.setPrice((String) price);
      Object productType = list.get(3);
      pigeonResult.setProductType(ProductType.values()[(int) productType]);
      Object sku = list.get(4);
      pigeonResult.setSku((String) sku);
      Object smallIconUrl = list.get(5);
      pigeonResult.setSmallIconUrl((String) smallIconUrl);
      Object subscriptionPeriod = list.get(6);
      pigeonResult.setSubscriptionPeriod((String) subscriptionPeriod);
      Object title = list.get(7);
      pigeonResult.setTitle((String) title);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ProductDataResponse {
    private @NonNull List<String> unavailableSkus;

    public @NonNull List<String> getUnavailableSkus() {
      return unavailableSkus;
    }

    public void setUnavailableSkus(@NonNull List<String> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"unavailableSkus\" is null.");
      }
      this.unavailableSkus = setterArg;
    }

    private @NonNull RequestStatus requestStatus;

    public @NonNull RequestStatus getRequestStatus() {
      return requestStatus;
    }

    public void setRequestStatus(@NonNull RequestStatus setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"requestStatus\" is null.");
      }
      this.requestStatus = setterArg;
    }

    private @NonNull Map<String, Product> productData;

    public @NonNull Map<String, Product> getProductData() {
      return productData;
    }

    public void setProductData(@NonNull Map<String, Product> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"productData\" is null.");
      }
      this.productData = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    ProductDataResponse() {}

    public static final class Builder {

      private @Nullable List<String> unavailableSkus;

      public @NonNull Builder setUnavailableSkus(@NonNull List<String> setterArg) {
        this.unavailableSkus = setterArg;
        return this;
      }

      private @Nullable RequestStatus requestStatus;

      public @NonNull Builder setRequestStatus(@NonNull RequestStatus setterArg) {
        this.requestStatus = setterArg;
        return this;
      }

      private @Nullable Map<String, Product> productData;

      public @NonNull Builder setProductData(@NonNull Map<String, Product> setterArg) {
        this.productData = setterArg;
        return this;
      }

      public @NonNull ProductDataResponse build() {
        ProductDataResponse pigeonReturn = new ProductDataResponse();
        pigeonReturn.setUnavailableSkus(unavailableSkus);
        pigeonReturn.setRequestStatus(requestStatus);
        pigeonReturn.setProductData(productData);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(unavailableSkus);
      toListResult.add(requestStatus == null ? null : requestStatus.index);
      toListResult.add(productData);
      return toListResult;
    }

    static @NonNull ProductDataResponse fromList(@NonNull ArrayList<Object> list) {
      ProductDataResponse pigeonResult = new ProductDataResponse();
      Object unavailableSkus = list.get(0);
      pigeonResult.setUnavailableSkus((List<String>) unavailableSkus);
      Object requestStatus = list.get(1);
      pigeonResult.setRequestStatus(RequestStatus.values()[(int) requestStatus]);
      Object productData = list.get(2);
      pigeonResult.setProductData((Map<String, Product>) productData);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PurchaseResponse {
    private @Nullable UserData userData;

    public @Nullable UserData getUserData() {
      return userData;
    }

    public void setUserData(@Nullable UserData setterArg) {
      this.userData = setterArg;
    }

    private @Nullable Receipt receipt;

    public @Nullable Receipt getReceipt() {
      return receipt;
    }

    public void setReceipt(@Nullable Receipt setterArg) {
      this.receipt = setterArg;
    }

    private @NonNull PurchaseRequestStatus requestStatus;

    public @NonNull PurchaseRequestStatus getRequestStatus() {
      return requestStatus;
    }

    public void setRequestStatus(@NonNull PurchaseRequestStatus setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"requestStatus\" is null.");
      }
      this.requestStatus = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PurchaseResponse() {}

    public static final class Builder {

      private @Nullable UserData userData;

      public @NonNull Builder setUserData(@Nullable UserData setterArg) {
        this.userData = setterArg;
        return this;
      }

      private @Nullable Receipt receipt;

      public @NonNull Builder setReceipt(@Nullable Receipt setterArg) {
        this.receipt = setterArg;
        return this;
      }

      private @Nullable PurchaseRequestStatus requestStatus;

      public @NonNull Builder setRequestStatus(@NonNull PurchaseRequestStatus setterArg) {
        this.requestStatus = setterArg;
        return this;
      }

      public @NonNull PurchaseResponse build() {
        PurchaseResponse pigeonReturn = new PurchaseResponse();
        pigeonReturn.setUserData(userData);
        pigeonReturn.setReceipt(receipt);
        pigeonReturn.setRequestStatus(requestStatus);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add((userData == null) ? null : userData.toList());
      toListResult.add((receipt == null) ? null : receipt.toList());
      toListResult.add(requestStatus == null ? null : requestStatus.index);
      return toListResult;
    }

    static @NonNull PurchaseResponse fromList(@NonNull ArrayList<Object> list) {
      PurchaseResponse pigeonResult = new PurchaseResponse();
      Object userData = list.get(0);
      pigeonResult.setUserData((userData == null) ? null : UserData.fromList((ArrayList<Object>) userData));
      Object receipt = list.get(1);
      pigeonResult.setReceipt((receipt == null) ? null : Receipt.fromList((ArrayList<Object>) receipt));
      Object requestStatus = list.get(2);
      pigeonResult.setRequestStatus(PurchaseRequestStatus.values()[(int) requestStatus]);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class InstallDetails {
    private @NonNull Boolean isAmazonStoreInstalled;

    public @NonNull Boolean getIsAmazonStoreInstalled() {
      return isAmazonStoreInstalled;
    }

    public void setIsAmazonStoreInstalled(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"isAmazonStoreInstalled\" is null.");
      }
      this.isAmazonStoreInstalled = setterArg;
    }

    private @NonNull Boolean installedFromAmazonStore;

    public @NonNull Boolean getInstalledFromAmazonStore() {
      return installedFromAmazonStore;
    }

    public void setInstalledFromAmazonStore(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"installedFromAmazonStore\" is null.");
      }
      this.installedFromAmazonStore = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    InstallDetails() {}

    public static final class Builder {

      private @Nullable Boolean isAmazonStoreInstalled;

      public @NonNull Builder setIsAmazonStoreInstalled(@NonNull Boolean setterArg) {
        this.isAmazonStoreInstalled = setterArg;
        return this;
      }

      private @Nullable Boolean installedFromAmazonStore;

      public @NonNull Builder setInstalledFromAmazonStore(@NonNull Boolean setterArg) {
        this.installedFromAmazonStore = setterArg;
        return this;
      }

      public @NonNull InstallDetails build() {
        InstallDetails pigeonReturn = new InstallDetails();
        pigeonReturn.setIsAmazonStoreInstalled(isAmazonStoreInstalled);
        pigeonReturn.setInstalledFromAmazonStore(installedFromAmazonStore);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(isAmazonStoreInstalled);
      toListResult.add(installedFromAmazonStore);
      return toListResult;
    }

    static @NonNull InstallDetails fromList(@NonNull ArrayList<Object> list) {
      InstallDetails pigeonResult = new InstallDetails();
      Object isAmazonStoreInstalled = list.get(0);
      pigeonResult.setIsAmazonStoreInstalled((Boolean) isAmazonStoreInstalled);
      Object installedFromAmazonStore = list.get(1);
      pigeonResult.setInstalledFromAmazonStore((Boolean) installedFromAmazonStore);
      return pigeonResult;
    }
  }

  /** Asynchronous error handling return type for non-nullable API method returns. */
  public interface Result<T> {
    /** Success case callback method for handling returns. */
    void success(@NonNull T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for nullable API method returns. */
  public interface NullableResult<T> {
    /** Success case callback method for handling returns. */
    void success(@Nullable T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }

  private static class AmazonIapApiCodec extends StandardMessageCodec {
    public static final AmazonIapApiCodec INSTANCE = new AmazonIapApiCodec();

    private AmazonIapApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return InstallDetails.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof InstallDetails) {
        stream.write(128);
        writeValue(stream, ((InstallDetails) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface AmazonIapApi {

    void setup();

    void getUserData();

    void getPurchaseUpdates(@NonNull Boolean reset);

    void getProductData(@NonNull List<String> skus);

    void purchase(@NonNull String sku);

    void notifyFulfillment(@NonNull String receiptId, @NonNull FulfillmentResult fulfillmentResult);

    @NonNull 
    InstallDetails getInstallationDetails();

    /** The codec used by AmazonIapApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return AmazonIapApiCodec.INSTANCE;
    }
    /**Sets up an instance of `AmazonIapApi` to handle messages through the `binaryMessenger`. */
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable AmazonIapApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.amazon_iap.AmazonIapApi.setup", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.setup();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.amazon_iap.AmazonIapApi.getUserData", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.getUserData();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.amazon_iap.AmazonIapApi.getPurchaseUpdates", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Boolean resetArg = (Boolean) args.get(0);
                try {
                  api.getPurchaseUpdates(resetArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.amazon_iap.AmazonIapApi.getProductData", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                List<String> skusArg = (List<String>) args.get(0);
                try {
                  api.getProductData(skusArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.amazon_iap.AmazonIapApi.purchase", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String skuArg = (String) args.get(0);
                try {
                  api.purchase(skuArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.amazon_iap.AmazonIapApi.notifyFulfillment", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String receiptIdArg = (String) args.get(0);
                FulfillmentResult fulfillmentResultArg = FulfillmentResult.values()[(int) args.get(1)];
                try {
                  api.notifyFulfillment(receiptIdArg, fulfillmentResultArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.amazon_iap.AmazonIapApi.getInstallationDetails", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  InstallDetails output = api.getInstallationDetails();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class AmazonIapCallbackApiCodec extends StandardMessageCodec {
    public static final AmazonIapCallbackApiCodec INSTANCE = new AmazonIapCallbackApiCodec();

    private AmazonIapCallbackApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return Product.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return ProductDataResponse.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return PurchaseResponse.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return PurchaseUpdatesResponse.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 132:
          return Receipt.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 133:
          return UserData.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 134:
          return UserData.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 135:
          return UserDataResponse.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof Product) {
        stream.write(128);
        writeValue(stream, ((Product) value).toList());
      } else if (value instanceof ProductDataResponse) {
        stream.write(129);
        writeValue(stream, ((ProductDataResponse) value).toList());
      } else if (value instanceof PurchaseResponse) {
        stream.write(130);
        writeValue(stream, ((PurchaseResponse) value).toList());
      } else if (value instanceof PurchaseUpdatesResponse) {
        stream.write(131);
        writeValue(stream, ((PurchaseUpdatesResponse) value).toList());
      } else if (value instanceof Receipt) {
        stream.write(132);
        writeValue(stream, ((Receipt) value).toList());
      } else if (value instanceof UserData) {
        stream.write(133);
        writeValue(stream, ((UserData) value).toList());
      } else if (value instanceof UserData) {
        stream.write(134);
        writeValue(stream, ((UserData) value).toList());
      } else if (value instanceof UserDataResponse) {
        stream.write(135);
        writeValue(stream, ((UserDataResponse) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class AmazonIapCallbackApi {
    private final @NonNull BinaryMessenger binaryMessenger;

    public AmazonIapCallbackApi(@NonNull BinaryMessenger argBinaryMessenger) {
      this.binaryMessenger = argBinaryMessenger;
    }

    /** Public interface for sending reply. */ 
    /** The codec used by AmazonIapCallbackApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return AmazonIapCallbackApiCodec.INSTANCE;
    }
    public void onUserDataResponse(@NonNull UserDataResponse dataArg, @NonNull Result<Void> result) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.amazon_iap.AmazonIapCallbackApi.onUserDataResponse", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(dataArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), (String) listReply.get(2)));
              } else {
                result.success(null);
              }
            }  else {
              result.error(new FlutterError("channel-error",  "Unable to establish connection on channel.", ""));
            } 
          });
    }
    public void onPurchaseUpdatesResponse(@NonNull PurchaseUpdatesResponse dataArg, @NonNull Result<Void> result) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.amazon_iap.AmazonIapCallbackApi.onPurchaseUpdatesResponse", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(dataArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), (String) listReply.get(2)));
              } else {
                result.success(null);
              }
            }  else {
              result.error(new FlutterError("channel-error",  "Unable to establish connection on channel.", ""));
            } 
          });
    }
    public void onProductDataResponse(@NonNull ProductDataResponse dataArg, @NonNull Result<Void> result) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.amazon_iap.AmazonIapCallbackApi.onProductDataResponse", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(dataArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), (String) listReply.get(2)));
              } else {
                result.success(null);
              }
            }  else {
              result.error(new FlutterError("channel-error",  "Unable to establish connection on channel.", ""));
            } 
          });
    }
    public void onPurchaseResponse(@NonNull PurchaseResponse dataArg, @NonNull Result<Void> result) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.amazon_iap.AmazonIapCallbackApi.onPurchaseResponse", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(dataArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), (String) listReply.get(2)));
              } else {
                result.success(null);
              }
            }  else {
              result.error(new FlutterError("channel-error",  "Unable to establish connection on channel.", ""));
            } 
          });
    }
  }
}
